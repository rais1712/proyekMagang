<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    id(&quot;com.android.application&quot;)&#10;    id(&quot;org.jetbrains.kotlin.android&quot;)&#10;    id(&quot;kotlin-kapt&quot;)&#10;    id(&quot;com.google.dagger.hilt.android&quot;)&#10;    id(&quot;androidx.navigation.safeargs.kotlin&quot;)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.proyek.maganggsp&quot;&#10;    compileSdk = 34&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.proyek.maganggsp&quot;&#10;        minSdk = 24&#10;        targetSdk = 34&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    val properties = java.util.Properties().apply {&#10;        load(rootProject.file(&quot;app/config.properties&quot;).inputStream())&#10;    }&#10;&#10;    buildTypes {&#10;        debug {&#10;            buildConfigField(&quot;String&quot;, &quot;BASE_URL&quot;, &quot;\&quot;${properties.getProperty(&quot;BASE_URL_DEBUG&quot;)}\&quot;&quot;)&#10;            isMinifyEnabled = false&#10;        }&#10;        release {&#10;            buildConfigField(&quot;String&quot;, &quot;BASE_URL&quot;, &quot;\&quot;${properties.getProperty(&quot;BASE_URL_RELEASE&quot;)}\&quot;&quot;)&#10;            isMinifyEnabled = true&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;&#10;    buildFeatures {&#10;        viewBinding = true&#10;    }&#10;&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_17&#10;        targetCompatibility = JavaVersion.VERSION_17&#10;    }&#10;&#10;    kotlinOptions {&#10;        jvmTarget = &quot;17&quot;&#10;    }&#10;}&#10;&#10;dependencies {&#10;    // Core Android&#10;    implementation(&quot;androidx.core:core-ktx:1.12.0&quot;)&#10;    implementation(&quot;androidx.appcompat:appcompat:1.6.1&quot;)&#10;    implementation(&quot;com.google.android.material:material:1.11.0&quot;)&#10;    implementation(&quot;androidx.constraintlayout:constraintlayout:2.1.4&quot;)&#10;    implementation(&quot;androidx.swiperefreshlayout:swiperefreshlayout:1.1.0&quot;)&#10;&#10;    // Architecture Components&#10;    implementation(&quot;androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.2&quot;)&#10;    implementation(&quot;androidx.lifecycle:lifecycle-livedata-ktx:2.6.2&quot;)&#10;    implementation(&quot;androidx.lifecycle:lifecycle-runtime-ktx:2.6.2&quot;)&#10;&#10;    // Navigation Component&#10;    implementation(&quot;androidx.navigation:navigation-fragment-ktx:2.7.5&quot;)&#10;    implementation(&quot;androidx.navigation:navigation-ui-ktx:2.7.5&quot;)&#10;&#10;    // Dependency Injection&#10;    implementation(&quot;com.google.dagger:hilt-android:2.48&quot;)&#10;    kapt(&quot;com.google.dagger:hilt-android-compiler:2.48&quot;)&#10;&#10;    // Networking&#10;    implementation(&quot;com.squareup.retrofit2:retrofit:2.9.0&quot;)&#10;    implementation(&quot;com.squareup.retrofit2:converter-gson:2.9.0&quot;)&#10;    implementation(&quot;com.squareup.okhttp3:okhttp:4.11.0&quot;)&#10;    implementation(&quot;com.squareup.okhttp3:logging-interceptor:4.11.0&quot;)&#10;&#10;    // Local Storage&#10;    implementation(&quot;androidx.room:room-runtime:2.6.0&quot;)&#10;    implementation(&quot;androidx.room:room-ktx:2.6.0&quot;)&#10;    kapt(&quot;androidx.room:room-compiler:2.6.0&quot;)&#10;&#10;    // Coroutines&#10;    implementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3&quot;)&#10;    implementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3&quot;)&#10;&#10;    // DataStore&#10;    implementation(&quot;androidx.datastore:datastore-preferences:1.0.0&quot;)&#10;&#10;    // Testing&#10;    testImplementation(&quot;junit:junit:4.13.2&quot;)&#10;    androidTestImplementation(&quot;androidx.test.ext:junit:1.1.5&quot;)&#10;    androidTestImplementation(&quot;androidx.test.espresso:espresso-core:3.5.1&quot;)&#10;}" />
              <option name="updatedContent" value="plugins {&#10;    id(&quot;com.android.application&quot;)&#10;    id(&quot;org.jetbrains.kotlin.android&quot;)&#10;    id(&quot;kotlin-kapt&quot;)&#10;    id(&quot;com.google.dagger.hilt.android&quot;)&#10;    id(&quot;androidx.navigation.safeargs.kotlin&quot;)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.proyek.maganggsp&quot;&#10;    compileSdk = 34&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.proyek.maganggsp&quot;&#10;        minSdk = 24&#10;        targetSdk = 34&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        debug {&#10;            buildConfigField(&quot;String&quot;, &quot;BASE_URL&quot;, &quot;\&quot;https://dev-api.gespay.co.id/\&quot;&quot;)&#10;            isMinifyEnabled = false&#10;        }&#10;        release {&#10;            buildConfigField(&quot;String&quot;, &quot;BASE_URL&quot;, &quot;\&quot;https://api.gespay.co.id/\&quot;&quot;)&#10;            isMinifyEnabled = true&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;&#10;    buildFeatures {&#10;        viewBinding = true&#10;        buildConfig = true&#10;    }&#10;&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_17&#10;        targetCompatibility = JavaVersion.VERSION_17&#10;    }&#10;&#10;    kotlinOptions {&#10;        jvmTarget = &quot;17&quot;&#10;    }&#10;}&#10;&#10;dependencies {&#10;    // Core Android&#10;    implementation(&quot;androidx.core:core-ktx:1.12.0&quot;)&#10;    implementation(&quot;androidx.appcompat:appcompat:1.6.1&quot;)&#10;    implementation(&quot;com.google.android.material:material:1.11.0&quot;)&#10;    implementation(&quot;androidx.constraintlayout:constraintlayout:2.1.4&quot;)&#10;    implementation(&quot;androidx.swiperefreshlayout:swiperefreshlayout:1.1.0&quot;)&#10;&#10;    // Architecture Components&#10;    implementation(&quot;androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.2&quot;)&#10;    implementation(&quot;androidx.lifecycle:lifecycle-livedata-ktx:2.6.2&quot;)&#10;    implementation(&quot;androidx.lifecycle:lifecycle-runtime-ktx:2.6.2&quot;)&#10;&#10;    // Navigation Component&#10;    implementation(&quot;androidx.navigation:navigation-fragment-ktx:2.7.5&quot;)&#10;    implementation(&quot;androidx.navigation:navigation-ui-ktx:2.7.5&quot;)&#10;&#10;    // Dependency Injection&#10;    implementation(&quot;com.google.dagger:hilt-android:2.48&quot;)&#10;    kapt(&quot;com.google.dagger:hilt-android-compiler:2.48&quot;)&#10;&#10;    // Networking&#10;    implementation(&quot;com.squareup.retrofit2:retrofit:2.9.0&quot;)&#10;    implementation(&quot;com.squareup.retrofit2:converter-gson:2.9.0&quot;)&#10;    implementation(&quot;com.squareup.okhttp3:okhttp:4.11.0&quot;)&#10;    implementation(&quot;com.squareup.okhttp3:logging-interceptor:4.11.0&quot;)&#10;&#10;    // Local Storage&#10;    implementation(&quot;androidx.room:room-runtime:2.6.0&quot;)&#10;    implementation(&quot;androidx.room:room-ktx:2.6.0&quot;)&#10;    kapt(&quot;androidx.room:room-compiler:2.6.0&quot;)&#10;&#10;    // Coroutines&#10;    implementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3&quot;)&#10;    implementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3&quot;)&#10;&#10;    // DataStore&#10;    implementation(&quot;androidx.datastore:datastore-preferences:1.0.0&quot;)&#10;&#10;    // Testing&#10;    testImplementation(&quot;junit:junit:4.13.2&quot;)&#10;    androidTestImplementation(&quot;androidx.test.ext:junit:1.1.5&quot;)&#10;    androidTestImplementation(&quot;androidx.test.espresso:espresso-core:3.5.1&quot;)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/config.properties">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/config.properties" />
              <option name="originalContent" value="# API Configuration&#10;BASE_URL_DEBUG=&quot;https://dev-api.gespay.co.id/&quot;&#10;BASE_URL_RELEASE=&quot;https://api.gespay.co.id/&quot;&#10;&#10;" />
              <option name="updatedContent" value="# API Configuration&#10;BASE_URL_DEBUG=https://dev-api.gespay.co.id/&#10;BASE_URL_RELEASE=https://api.gespay.co.id/" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;&#10;&#10;    &lt;application&#10;        android:name=&quot;.GespayAdmin&quot;&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.MagangGSP&quot;&#10;        tools:targetApi=&quot;31&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:theme=&quot;@style/Theme.MagangGSP&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#13;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#13;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#13;&#10;&#13;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#13;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;&#13;&#10;&#13;&#10;    &lt;application&#13;&#10;        android:name=&quot;.GespayAdmin&quot;&#13;&#10;        android:allowBackup=&quot;true&quot;&#13;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#13;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#13;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#13;&#10;        android:label=&quot;@string/app_name&quot;&#13;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#13;&#10;        android:supportsRtl=&quot;true&quot;&#13;&#10;        android:theme=&quot;@style/Theme.MagangGSP&quot;&#13;&#10;        android:usesCleartextTraffic=&quot;true&quot;&#13;&#10;        tools:targetApi=&quot;31&quot;&gt;&#13;&#10;        &#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.MainActivity&quot;&#13;&#10;            android:exported=&quot;true&quot;&#13;&#10;            android:screenOrientation=&quot;portrait&quot;&#13;&#10;            android:windowSoftInputMode=&quot;adjustResize&quot;&#13;&#10;            android:theme=&quot;@style/Theme.MagangGSP&quot;&gt;&#13;&#10;            &lt;intent-filter&gt;&#13;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#13;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#13;&#10;            &lt;/intent-filter&gt;&#13;&#10;        &lt;/activity&gt;&#13;&#10;&#13;&#10;    &lt;/application&gt;&#13;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/proyek/maganggsp/GesPay.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/proyek/maganggsp/GesPay.kt" />
              <option name="updatedContent" value="package com.proyek.maganggsp&#10;&#10;import android.app.Application&#10;import dagger.hilt.android.HiltAndroidApp&#10;&#10;/**&#10; * Base Application class for GesPay Admin&#10; * Annotated with @HiltAndroidApp to enable dependency injection throughout the app&#10; */&#10;@HiltAndroidApp&#10;class GesPay : Application()" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/proyek/maganggsp/GespayAdmin.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/proyek/maganggsp/GespayAdmin.kt" />
              <option name="updatedContent" value="package com.proyek.maganggsp&#10;&#10;import android.app.Application&#10;import dagger.hilt.android.HiltAndroidApp&#10;&#10;/**&#10; * Base Application class for GesPay Admin&#10; * Annotated with @HiltAndroidApp to enable dependency injection throughout the app&#10; */&#10;@HiltAndroidApp&#10;class GespayAdmin : Application()" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/proyek/maganggsp/data/local/SessionManager.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/proyek/maganggsp/data/local/SessionManager.kt" />
              <option name="updatedContent" value="package com.proyek.maganggsp.data.local&#10;&#10;import android.content.Context&#10;import androidx.datastore.core.DataStore&#10;import androidx.datastore.preferences.core.Preferences&#10;import androidx.datastore.preferences.core.edit&#10;import androidx.datastore.preferences.core.stringPreferencesKey&#10;import androidx.datastore.preferences.preferencesDataStore&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.map&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;private val Context.dataStore: DataStore&lt;Preferences&gt; by preferencesDataStore(name = &quot;session&quot;)&#10;&#10;@Singleton&#10;class SessionManager @Inject constructor(&#10;    @ApplicationContext private val context: Context&#10;) {&#10;    private val dataStore = context.dataStore&#10;&#10;    companion object {&#10;        private val TOKEN_KEY = stringPreferencesKey(&quot;jwt_token&quot;)&#10;    }&#10;&#10;    val token: Flow&lt;String?&gt;&#10;        get() = dataStore.data.map { preferences -&gt;&#10;            preferences[TOKEN_KEY]&#10;        }&#10;&#10;    suspend fun saveToken(token: String) {&#10;        dataStore.edit { preferences -&gt;&#10;            preferences[TOKEN_KEY] = token&#10;        }&#10;    }&#10;&#10;    suspend fun clearToken() {&#10;        dataStore.edit { preferences -&gt;&#10;            preferences.remove(TOKEN_KEY)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/proyek/maganggsp/data/remote/api/AuthApi.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/proyek/maganggsp/data/remote/api/AuthApi.kt" />
              <option name="originalContent" value="package com.proyek.maganggsp.data.remote.api&#10;&#10;import com.proyek.maganggsp.data.remote.dto.LoginResponseDto&#10;import retrofit2.Response&#10;import retrofit2.http.Body&#10;import retrofit2.http.POST&#10;&#10;/**&#10; * Interface untuk autentikasi API&#10; */&#10;interface AuthApi {&#10;    @POST(&quot;auth/login&quot;)&#10;    suspend fun login(&#10;        @Body request: LoginRequest&#10;    ): Response&lt;LoginResponseDto&gt;&#10;}&#10;&#10;data class LoginRequest(&#10;    val email: String,&#10;    val password: String&#10;)&#10;" />
              <option name="updatedContent" value="package com.proyek.maganggsp.data.remote.api&#10;&#10;import com.proyek.maganggsp.data.remote.dto.LoginResponseDto&#10;import retrofit2.Response&#10;import retrofit2.http.Body&#10;import retrofit2.http.POST&#10;&#10;/**&#10; * Interface untuk autentikasi API&#10; */&#10;interface AuthApi {&#10;    @POST(&quot;auth/login&quot;)&#10;    suspend fun login(&#10;        @Body request: LoginRequest&#10;    ): Response&lt;LoginResponseDto&gt;&#10;&#10;    @POST(&quot;auth/logout&quot;)&#10;    suspend fun logout(): Response&lt;Unit&gt;&#10;}&#10;&#10;data class LoginRequest(&#10;    val email: String,&#10;    val password: String&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/proyek/maganggsp/data/remote/api/HistoryApi.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/proyek/maganggsp/data/remote/api/HistoryApi.kt" />
              <option name="updatedContent" value="package com.proyek.maganggsp.data.remote.api&#10;&#10;import com.proyek.maganggsp.data.remote.dto.LoketDto&#10;import retrofit2.Response&#10;import retrofit2.http.GET&#10;&#10;/**&#10; * Interface untuk endpoint-endpoint terkait History&#10; */&#10;interface HistoryApi {&#10;    @GET(&quot;history/recent&quot;)&#10;    suspend fun getRecentHistory(): Response&lt;List&lt;LoketDto&gt;&gt;&#10;&#10;    @GET(&quot;history/full&quot;)&#10;    suspend fun getFullHistory(): Response&lt;List&lt;LoketDto&gt;&gt;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/proyek/maganggsp/data/remote/api/LoketApi.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/proyek/maganggsp/data/remote/api/LoketApi.kt" />
              <option name="originalContent" value="package com.proyek.maganggsp.data.remote.api&#10;&#10;import com.proyek.maganggsp.data.remote.dto.LoketDto&#10;import com.proyek.maganggsp.data.remote.dto.MutasiDto&#10;import retrofit2.Response&#10;import retrofit2.http.*&#10;&#10;/**&#10; * Interface untuk endpoint-endpoint terkait Loket&#10; */&#10;interface LoketApi {&#10;    @GET(&quot;loket/{phoneNumber}&quot;)&#10;    suspend fun getLoketByPhone(&#10;        @Path(&quot;phoneNumber&quot;) phoneNumber: String&#10;    ): Response&lt;LoketDto&gt;&#10;&#10;    @GET(&quot;loket/{id}/mutations&quot;)&#10;    suspend fun getLoketMutations(&#10;        @Path(&quot;id&quot;) loketId: String&#10;    ): Response&lt;List&lt;MutasiDto&gt;&gt;&#10;&#10;    @POST(&quot;loket/{id}/block&quot;)&#10;    suspend fun blockLoket(&#10;        @Path(&quot;id&quot;) loketId: String&#10;    ): Response&lt;Unit&gt;&#10;&#10;    @POST(&quot;loket/{id}/unblock&quot;)&#10;    suspend fun unblockLoket(&#10;        @Path(&quot;id&quot;) loketId: String&#10;    ): Response&lt;Unit&gt;&#10;&#10;    @GET(&quot;loket/flagged&quot;)&#10;    suspend fun getFlaggedLokets(): Response&lt;List&lt;LoketDto&gt;&gt;&#10;&#10;    @GET(&quot;loket/blocked&quot;)&#10;    suspend fun getBlockedLokets(): Response&lt;List&lt;LoketDto&gt;&gt;&#10;}&#10;" />
              <option name="updatedContent" value="package com.proyek.maganggsp.data.remote.api&#10;&#10;import com.proyek.maganggsp.data.remote.dto.LoketDto&#10;import com.proyek.maganggsp.data.remote.dto.MutasiDto&#10;import retrofit2.Response&#10;import retrofit2.http.*&#10;&#10;/**&#10; * Interface untuk endpoint-endpoint terkait Loket&#10; */&#10;interface LoketApi {&#10;    @GET(&quot;loket/{phoneNumber}&quot;)&#10;    suspend fun getLoketByPhone(&#10;        @Path(&quot;phoneNumber&quot;) phoneNumber: String&#10;    ): Response&lt;LoketDto&gt;&#10;&#10;    @GET(&quot;loket/{id}/mutations&quot;)&#10;    suspend fun getLoketMutations(&#10;        @Path(&quot;id&quot;) loketId: String&#10;    ): Response&lt;List&lt;MutasiDto&gt;&gt;&#10;&#10;    @POST(&quot;loket/{id}/block&quot;)&#10;    suspend fun blockLoket(&#10;        @Path(&quot;id&quot;) loketId: String&#10;    ): Response&lt;Unit&gt;&#10;&#10;    @POST(&quot;loket/{id}/unblock&quot;)&#10;    suspend fun unblockLoket(&#10;        @Path(&quot;id&quot;) loketId: String&#10;    ): Response&lt;Unit&gt;&#10;&#10;    @GET(&quot;loket/flagged&quot;)&#10;    suspend fun getFlaggedLokets(): Response&lt;List&lt;LoketDto&gt;&gt;&#10;&#10;    @GET(&quot;loket/blocked&quot;)&#10;    suspend fun getBlockedLokets(): Response&lt;List&lt;LoketDto&gt;&gt;&#10;&#10;    @POST(&quot;mutations/{id}/flag&quot;)&#10;    suspend fun flagTransaction(@Path(&quot;id&quot;) mutationId: String): Response&lt;Unit&gt;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/proyek/maganggsp/data/remote/dto/AuthDto.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/proyek/maganggsp/data/remote/dto/AuthDto.kt" />
              <option name="updatedContent" value="package com.proyek.maganggsp.data.remote.dto&#10;&#10;/**&#10; * DTO untuk response dari endpoint login&#10; */&#10;data class LoginResponseDto(&#10;    val token: String,&#10;    val admin: AdminDto&#10;)&#10;&#10;data class AdminDto(&#10;    val id: String,&#10;    val email: String,&#10;    val name: String,&#10;    val role: String&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/proyek/maganggsp/data/remote/dto/BaseResponse.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/proyek/maganggsp/data/remote/dto/BaseResponse.kt" />
              <option name="updatedContent" value="package com.proyek.maganggsp.data.remote.dto&#10;&#10;/**&#10; * Base response wrapper untuk semua response API&#10; */&#10;data class BaseResponse&lt;T&gt;(&#10;    val success: Boolean,&#10;    val message: String,&#10;    val data: T?&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/proyek/maganggsp/data/remote/dto/LoketDto.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/proyek/maganggsp/data/remote/dto/LoketDto.kt" />
              <option name="originalContent" value="package com.proyek.maganggsp.data.remote.dto&#10;&#10;import java.math.BigDecimal&#10;import java.util.Date&#10;&#10;/**&#10; * DTO untuk data Loket dan Mutasi&#10; */&#10;data class LoketDto(&#10;    val id: String,&#10;    val phoneNumber: String,&#10;    val ownerName: String,&#10;    val address: String,&#10;    val status: String,&#10;    val lastAccessed: String,&#10;    val hasFlaggedTransactions: Boolean&#10;)&#10;&#10;data class MutasiDto(&#10;    val id: String,&#10;    val loketId: String,&#10;    val type: String,&#10;    val amount: BigDecimal,&#10;    val timestamp: Date,&#10;    val description: String,&#10;    val status: String,&#10;    val isFlagged: Boolean&#10;)&#10;" />
              <option name="updatedContent" value="package com.proyek.maganggsp.data.remote.dto&#10;&#10;import java.math.BigDecimal&#10;import java.util.Date&#10;&#10;/**&#10; * DTO untuk data Loket dan Mutasi&#10; */&#10;data class LoketDto(&#10;    val loketNumber: String,&#10;    val phoneNumber: String,&#10;    val loketName: String,&#10;    val address: String,&#10;    val status: String,&#10;    val lastAccessed: String,&#10;    val hasFlaggedTransactions: Boolean&#10;)&#10;&#10;data class MutasiDto(&#10;    val refNumber: String,&#10;    val amount: BigDecimal,&#10;    val timestamp: Date,&#10;    val isFlagged: Boolean&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/proyek/maganggsp/data/remote/interceptor/AuthInterceptor.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/proyek/maganggsp/data/remote/interceptor/AuthInterceptor.kt" />
              <option name="updatedContent" value="package com.proyek.maganggsp.data.remote.interceptor&#10;&#10;import com.proyek.maganggsp.data.local.SessionManager&#10;import kotlinx.coroutines.flow.first&#10;import kotlinx.coroutines.runBlocking&#10;import okhttp3.Interceptor&#10;import okhttp3.Response&#10;import javax.inject.Inject&#10;&#10;class AuthInterceptor @Inject constructor(&#10;    private val sessionManager: SessionManager&#10;) : Interceptor {&#10;    override fun intercept(chain: Interceptor.Chain): Response {&#10;        val token = runBlocking {&#10;            sessionManager.token.first()&#10;        }&#10;        &#10;        val request = chain.request().newBuilder()&#10;        token?.let {&#10;            request.addHeader(&quot;Authorization&quot;, &quot;Bearer $it&quot;)&#10;        }&#10;        &#10;        return chain.proceed(request.build())&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/proyek/maganggsp/data/repository/AuthRepositoryImpl.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/proyek/maganggsp/data/repository/AuthRepositoryImpl.kt" />
              <option name="updatedContent" value="package com.proyek.maganggsp.data.repository&#10;&#10;import com.proyek.maganggsp.data.remote.api.AuthApi&#10;import com.proyek.maganggsp.data.remote.api.LoginRequest&#10;import com.proyek.maganggsp.domain.model.Admin&#10;import com.proyek.maganggsp.domain.repository.AuthRepository&#10;import com.proyek.maganggsp.util.Resource&#10;import javax.inject.Inject&#10;&#10;class AuthRepositoryImpl @Inject constructor(&#10;    private val api: AuthApi&#10;) : AuthRepository {&#10;&#10;    override suspend fun login(email: String, password: String): Resource&lt;Admin&gt; {&#10;        return try {&#10;            val response = api.login(LoginRequest(email, password))&#10;            if (response.isSuccessful) {&#10;                val adminDto = response.body()?.admin&#10;                if (adminDto != null) {&#10;                    Resource.Success(&#10;                        Admin(&#10;                            id = adminDto.id,&#10;                            email = adminDto.email,&#10;                            name = adminDto.name,&#10;                            role = adminDto.role&#10;                        )&#10;                    )&#10;                } else {&#10;                    Resource.Error(&quot;Response body is null&quot;)&#10;                }&#10;            } else {&#10;                Resource.Error(&quot;Login failed: ${response.message()}&quot;)&#10;            }&#10;        } catch (e: Exception) {&#10;            Resource.Error(e.message ?: &quot;An error occurred&quot;)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/proyek/maganggsp/data/repository/LoketRepositoryImpl.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/proyek/maganggsp/data/repository/LoketRepositoryImpl.kt" />
              <option name="originalContent" value="package com.proyek.maganggsp.data.repository&#10;&#10;import com.proyek.maganggsp.data.remote.api.LoketApi&#10;import com.proyek.maganggsp.data.remote.api.HistoryApi&#10;import com.proyek.maganggsp.domain.model.Loket&#10;import com.proyek.maganggsp.domain.model.LoketStatus&#10;import com.proyek.maganggsp.domain.model.Mutasi&#10;import com.proyek.maganggsp.domain.repository.LoketRepository&#10;import com.proyek.maganggsp.util.NetworkException&#10;import com.proyek.maganggsp.util.NetworkResult&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.flow&#10;import javax.inject.Inject&#10;&#10;class LoketRepositoryImpl @Inject constructor(&#10;    private val api: LoketApi,&#10;    private val historyApi: HistoryApi&#10;) : LoketRepository {&#10;&#10;    override suspend fun getLoketByPhone(phoneNumber: String): NetworkResult&lt;Loket&gt; {&#10;        return try {&#10;            val response = api.getLoketByPhone(phoneNumber)&#10;            if (response.isSuccessful) {&#10;                val loketDto = response.body()&#10;                if (loketDto != null) {&#10;                    NetworkResult.Success(&#10;                        Loket(&#10;                            loketNumber = loketDto.loketNumber,&#10;                            phoneNumber = loketDto.phoneNumber,&#10;                            loketName = loketDto.loketName,&#10;                            address = loketDto.address,&#10;                            status = if (loketDto.status == &quot;BLOCKED&quot;) LoketStatus.BLOCKED else LoketStatus.ACTIVE,&#10;                            lastAccessed = loketDto.lastAccessed,&#10;                            hasFlaggedTransactions = loketDto.hasFlaggedTransactions&#10;                        )&#10;                    )&#10;                } else {&#10;                    NetworkResult.Error(&#10;                        code = response.code(),&#10;                        message = &quot;Loket tidak ditemukan&quot;,&#10;                        networkMessage = response.message()&#10;                    )&#10;                }&#10;            } else {&#10;                NetworkResult.Error(&#10;                    code = response.code(),&#10;                    message = when(response.code()) {&#10;                        404 -&gt; &quot;Loket tidak ditemukan&quot;&#10;                        401 -&gt; &quot;Sesi telah berakhir, silakan login kembali&quot;&#10;                        in 500..599 -&gt; &quot;Terjadi kesalahan pada server&quot;&#10;                        else -&gt; &quot;Terjadi kesalahan&quot;&#10;                    },&#10;                    networkMessage = response.message()&#10;                )&#10;            }&#10;        } catch (e: Exception) {&#10;            val networkException = e.toNetworkException()&#10;            NetworkResult.Error(&#10;                message = when(networkException) {&#10;                    is NetworkException.Connection -&gt; &quot;Tidak ada koneksi internet&quot;&#10;                    is NetworkException.Timeout -&gt; &quot;Koneksi timeout&quot;&#10;                    is NetworkException.UnknownHost -&gt; &quot;Tidak dapat terhubung ke server&quot;&#10;                    else -&gt; &quot;Terjadi kesalahan&quot;&#10;                }&#10;            )&#10;        }&#10;    }&#10;&#10;    override suspend fun getMutations(loketNumber: String): NetworkResult&lt;List&lt;Mutasi&gt;&gt; {&#10;        return try {&#10;            val response = api.getLoketMutations(loketNumber)&#10;            if (response.isSuccessful) {&#10;                val mutasiList = response.body()?.map { dto -&gt;&#10;                    Mutasi(&#10;                        refNumber = dto.refNumber,&#10;                        amount = dto.amount,&#10;                        timestamp = dto.timestamp,&#10;                        isFlagged = dto.isFlagged&#10;                    )&#10;                } ?: emptyList()&#10;                NetworkResult.Success(mutasiList)&#10;            } else {&#10;                NetworkResult.Error(&#10;                    code = response.code(),&#10;                    message = when(response.code()) {&#10;                        404 -&gt; &quot;Data mutasi tidak ditemukan&quot;&#10;                        401 -&gt; &quot;Sesi telah berakhir&quot;&#10;                        else -&gt; &quot;Gagal mengambil data mutasi&quot;&#10;                    }&#10;                )&#10;            }&#10;        } catch (e: Exception) {&#10;            NetworkResult.Error(message = &quot;Terjadi kesalahan saat mengambil data mutasi&quot;)&#10;        }&#10;    }&#10;&#10;    override suspend fun blockLoket(loketNumber: String): NetworkResult&lt;Unit&gt; {&#10;        return try {&#10;            val response = api.blockLoket(loketNumber)&#10;            if (response.isSuccessful) {&#10;                NetworkResult.Success(Unit)&#10;            } else {&#10;                NetworkResult.Error(&#10;                    code = response.code(),&#10;                    message = &quot;Gagal memblokir loket&quot;&#10;                )&#10;            }&#10;        } catch (e: Exception) {&#10;            NetworkResult.Error(message = &quot;Terjadi kesalahan saat memblokir loket&quot;)&#10;        }&#10;    }&#10;&#10;    override suspend fun unblockLoket(loketNumber: String): NetworkResult&lt;Unit&gt; {&#10;        return try {&#10;            val response = api.unblockLoket(loketNumber)&#10;            if (response.isSuccessful) {&#10;                NetworkResult.Success(Unit)&#10;            } else {&#10;                NetworkResult.Error(&#10;                    code = response.code(),&#10;                    message = &quot;Gagal membuka blokir loket&quot;&#10;                )&#10;            }&#10;        } catch (e: Exception) {&#10;            NetworkResult.Error(message = &quot;Terjadi kesalahan saat membuka blokir loket&quot;)&#10;        }&#10;    }&#10;&#10;    override suspend fun getFlaggedLokets(): NetworkResult&lt;List&lt;Loket&gt;&gt; {&#10;        return try {&#10;            val response = api.getFlaggedLokets()&#10;            if (response.isSuccessful) {&#10;                val loketList = response.body()?.map { dto -&gt;&#10;                    Loket(&#10;                        loketNumber = dto.loketNumber,&#10;                        phoneNumber = dto.phoneNumber,&#10;                        loketName = dto.loketName,&#10;                        address = dto.address,&#10;                        status = if (dto.status == &quot;BLOCKED&quot;) LoketStatus.BLOCKED else LoketStatus.ACTIVE,&#10;                        lastAccessed = dto.lastAccessed,&#10;                        hasFlaggedTransactions = dto.hasFlaggedTransactions&#10;                    )&#10;                } ?: emptyList()&#10;                NetworkResult.Success(loketList)&#10;            } else {&#10;                NetworkResult.Error(&#10;                    code = response.code(),&#10;                    message = &quot;Gagal mengambil daftar loket yang ditandai&quot;&#10;                )&#10;            }&#10;        } catch (e: Exception) {&#10;            NetworkResult.Error(message = &quot;Terjadi kesalahan saat mengambil daftar loket&quot;)&#10;        }&#10;    }&#10;&#10;    override suspend fun getBlockedLokets(): NetworkResult&lt;List&lt;Loket&gt;&gt; {&#10;        return try {&#10;            val response = api.getBlockedLokets()&#10;            if (response.isSuccessful) {&#10;                val loketList = response.body()?.map { dto -&gt;&#10;                    Loket(&#10;                        loketNumber = dto.loketNumber,&#10;                        phoneNumber = dto.phoneNumber,&#10;                        loketName = dto.loketName,&#10;                        address = dto.address,&#10;                        status = LoketStatus.BLOCKED,&#10;                        lastAccessed = dto.lastAccessed,&#10;                        hasFlaggedTransactions = dto.hasFlaggedTransactions&#10;                    )&#10;                } ?: emptyList()&#10;                NetworkResult.Success(loketList)&#10;            } else {&#10;                NetworkResult.Error(&#10;                    code = response.code(),&#10;                    message = &quot;Gagal mengambil daftar loket yang diblokir&quot;&#10;                )&#10;            }&#10;        } catch (e: Exception) {&#10;            NetworkResult.Error(message = &quot;Terjadi kesalahan saat mengambil daftar loket&quot;)&#10;        }&#10;    }&#10;&#10;    override fun getRecentHistory(): Flow&lt;NetworkResult&lt;List&lt;Loket&gt;&gt;&gt; = flow {&#10;        emit(NetworkResult.Loading())&#10;        try {&#10;            val response = historyApi.getRecentHistory()&#10;            if (response.isSuccessful) {&#10;                val loketList = response.body()?.map { dto -&gt;&#10;                    Loket(&#10;                        loketNumber = dto.loketNumber,&#10;                        phoneNumber = dto.phoneNumber,&#10;                        loketName = dto.loketName,&#10;                        address = dto.address,&#10;                        status = if (dto.status == &quot;BLOCKED&quot;) LoketStatus.BLOCKED else LoketStatus.ACTIVE,&#10;                        lastAccessed = dto.lastAccessed,&#10;                        hasFlaggedTransactions = dto.hasFlaggedTransactions&#10;                    )&#10;                } ?: emptyList()&#10;                emit(NetworkResult.Success(loketList))&#10;            } else {&#10;                emit(NetworkResult.Error(&#10;                    code = response.code(),&#10;                    message = &quot;Gagal mengambil riwayat terakhir&quot;&#10;                ))&#10;            }&#10;        } catch (e: Exception) {&#10;            emit(NetworkResult.Error(message = &quot;Terjadi kesalahan saat mengambil riwayat&quot;))&#10;        }&#10;    }&#10;&#10;    override fun getFullHistory(): Flow&lt;NetworkResult&lt;List&lt;Loket&gt;&gt;&gt; = flow {&#10;        emit(NetworkResult.Loading())&#10;        try {&#10;            val response = historyApi.getFullHistory()&#10;            if (response.isSuccessful) {&#10;                val loketList = response.body()?.map { dto -&gt;&#10;                    Loket(&#10;                        loketNumber = dto.loketNumber,&#10;                        phoneNumber = dto.phoneNumber,&#10;                        loketName = dto.loketName,&#10;                        address = dto.address,&#10;                        status = if (dto.status == &quot;BLOCKED&quot;) LoketStatus.BLOCKED else LoketStatus.ACTIVE,&#10;                        lastAccessed = dto.lastAccessed,&#10;                        hasFlaggedTransactions = dto.hasFlaggedTransactions&#10;                    )&#10;                } ?: emptyList()&#10;                emit(NetworkResult.Success(loketList))&#10;            } else {&#10;                emit(NetworkResult.Error(&#10;                    code = response.code(),&#10;                    message = &quot;Gagal mengambil riwayat lengkap&quot;&#10;                ))&#10;            }&#10;        } catch (e: Exception) {&#10;            emit(NetworkResult.Error(message = &quot;Terjadi kesalahan saat mengambil riwayat&quot;))&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.proyek.maganggsp.data.repository&#10;&#10;import com.proyek.maganggsp.data.remote.api.LoketApi&#10;import com.proyek.maganggsp.data.remote.api.HistoryApi&#10;import com.proyek.maganggsp.domain.model.Loket&#10;import com.proyek.maganggsp.domain.model.LoketStatus&#10;import com.proyek.maganggsp.domain.model.Mutasi&#10;import com.proyek.maganggsp.domain.repository.LoketRepository&#10;import com.proyek.maganggsp.util.NetworkException&#10;import com.proyek.maganggsp.util.NetworkResult&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.flow&#10;import javax.inject.Inject&#10;&#10;class LoketRepositoryImpl @Inject constructor(&#10;    private val api: LoketApi,&#10;    private val historyApi: HistoryApi&#10;) : LoketRepository {&#10;&#10;    override suspend fun getLoketByPhone(phoneNumber: String): NetworkResult&lt;Loket&gt; {&#10;        return try {&#10;            val response = api.getLoketByPhone(phoneNumber)&#10;            if (response.isSuccessful) {&#10;                val loketDto = response.body()&#10;                if (loketDto != null) {&#10;                    NetworkResult.Success(&#10;                        Loket(&#10;                            loketNumber = loketDto.loketNumber,&#10;                            phoneNumber = loketDto.phoneNumber,&#10;                            loketName = loketDto.loketName,&#10;                            address = loketDto.address,&#10;                            status = if (loketDto.status == &quot;BLOCKED&quot;) LoketStatus.BLOCKED else LoketStatus.ACTIVE,&#10;                            lastAccessed = loketDto.lastAccessed,&#10;                            hasFlaggedTransactions = loketDto.hasFlaggedTransactions&#10;                        )&#10;                    )&#10;                } else {&#10;                    NetworkResult.Error(&#10;                        code = response.code(),&#10;                        message = &quot;Loket tidak ditemukan&quot;,&#10;                        networkMessage = response.message()&#10;                    )&#10;                }&#10;            } else {&#10;                NetworkResult.Error(&#10;                    code = response.code(),&#10;                    message = when(response.code()) {&#10;                        404 -&gt; &quot;Loket tidak ditemukan&quot;&#10;                        401 -&gt; &quot;Sesi telah berakhir, silakan login kembali&quot;&#10;                        in 500..599 -&gt; &quot;Terjadi kesalahan pada server&quot;&#10;                        else -&gt; &quot;Terjadi kesalahan&quot;&#10;                    },&#10;                    networkMessage = response.message()&#10;                )&#10;            }&#10;        } catch (e: Exception) {&#10;            val networkException = e.toNetworkException()&#10;            NetworkResult.Error(&#10;                message = when(networkException) {&#10;                    is NetworkException.Connection -&gt; &quot;Tidak ada koneksi internet&quot;&#10;                    is NetworkException.Timeout -&gt; &quot;Koneksi timeout&quot;&#10;                    is NetworkException.UnknownHost -&gt; &quot;Tidak dapat terhubung ke server&quot;&#10;                    else -&gt; &quot;Terjadi kesalahan&quot;&#10;                }&#10;            )&#10;        }&#10;    }&#10;&#10;    override suspend fun getMutations(loketNumber: String): NetworkResult&lt;List&lt;Mutasi&gt;&gt; {&#10;        return try {&#10;            val response = api.getLoketMutations(loketNumber)&#10;            if (response.isSuccessful) {&#10;                val mutasiList = response.body()?.map { dto -&gt;&#10;                    Mutasi(&#10;                        refNumber = dto.refNumber,&#10;                        amount = dto.amount,&#10;                        timestamp = dto.timestamp,&#10;                        isFlagged = dto.isFlagged&#10;                    )&#10;                } ?: emptyList()&#10;                NetworkResult.Success(mutasiList)&#10;            } else {&#10;                NetworkResult.Error(&#10;                    code = response.code(),&#10;                    message = when(response.code()) {&#10;                        404 -&gt; &quot;Data mutasi tidak ditemukan&quot;&#10;                        401 -&gt; &quot;Sesi telah berakhir&quot;&#10;                        else -&gt; &quot;Gagal mengambil data mutasi&quot;&#10;                    }&#10;                )&#10;            }&#10;        } catch (e: Exception) {&#10;            NetworkResult.Error(message = &quot;Terjadi kesalahan saat mengambil data mutasi&quot;)&#10;        }&#10;    }&#10;&#10;    override suspend fun blockLoket(loketNumber: String): NetworkResult&lt;Unit&gt; {&#10;        return try {&#10;            val response = api.blockLoket(loketNumber)&#10;            if (response.isSuccessful) {&#10;                NetworkResult.Success(Unit)&#10;            } else {&#10;                NetworkResult.Error(&#10;                    code = response.code(),&#10;                    message = &quot;Gagal memblokir loket&quot;&#10;                )&#10;            }&#10;        } catch (e: Exception) {&#10;            NetworkResult.Error(message = &quot;Terjadi kesalahan saat memblokir loket&quot;)&#10;        }&#10;    }&#10;&#10;    override suspend fun unblockLoket(loketNumber: String): NetworkResult&lt;Unit&gt; {&#10;        return try {&#10;            val response = api.unblockLoket(loketNumber)&#10;            if (response.isSuccessful) {&#10;                NetworkResult.Success(Unit)&#10;            } else {&#10;                NetworkResult.Error(&#10;                    code = response.code(),&#10;                    message = &quot;Gagal membuka blokir loket&quot;&#10;                )&#10;            }&#10;        } catch (e: Exception) {&#10;            NetworkResult.Error(message = &quot;Terjadi kesalahan saat membuka blokir loket&quot;)&#10;        }&#10;    }&#10;&#10;    override suspend fun getFlaggedLokets(): NetworkResult&lt;List&lt;Loket&gt;&gt; {&#10;        return try {&#10;            val response = api.getFlaggedLokets()&#10;            if (response.isSuccessful) {&#10;                val loketList = response.body()?.map { dto -&gt;&#10;                    Loket(&#10;                        loketNumber = dto.loketNumber,&#10;                        phoneNumber = dto.phoneNumber,&#10;                        loketName = dto.loketName,&#10;                        address = dto.address,&#10;                        status = if (dto.status == &quot;BLOCKED&quot;) LoketStatus.BLOCKED else LoketStatus.ACTIVE,&#10;                        lastAccessed = dto.lastAccessed,&#10;                        hasFlaggedTransactions = dto.hasFlaggedTransactions&#10;                    )&#10;                } ?: emptyList()&#10;                NetworkResult.Success(loketList)&#10;            } else {&#10;                NetworkResult.Error(&#10;                    code = response.code(),&#10;                    message = &quot;Gagal mengambil daftar loket yang ditandai&quot;&#10;                )&#10;            }&#10;        } catch (e: Exception) {&#10;            NetworkResult.Error(message = &quot;Terjadi kesalahan saat mengambil daftar loket&quot;)&#10;        }&#10;    }&#10;&#10;    override suspend fun getBlockedLokets(): NetworkResult&lt;List&lt;Loket&gt;&gt; {&#10;        return try {&#10;            val response = api.getBlockedLokets()&#10;            if (response.isSuccessful) {&#10;                val loketList = response.body()?.map { dto -&gt;&#10;                    Loket(&#10;                        loketNumber = dto.loketNumber,&#10;                        phoneNumber = dto.phoneNumber,&#10;                        loketName = dto.loketName,&#10;                        address = dto.address,&#10;                        status = LoketStatus.BLOCKED,&#10;                        lastAccessed = dto.lastAccessed,&#10;                        hasFlaggedTransactions = dto.hasFlaggedTransactions&#10;                    )&#10;                } ?: emptyList()&#10;                NetworkResult.Success(loketList)&#10;            } else {&#10;                NetworkResult.Error(&#10;                    code = response.code(),&#10;                    message = &quot;Gagal mengambil daftar loket yang diblokir&quot;&#10;                )&#10;            }&#10;        } catch (e: Exception) {&#10;            NetworkResult.Error(message = &quot;Terjadi kesalahan saat mengambil daftar loket&quot;)&#10;        }&#10;    }&#10;&#10;    override fun getRecentHistory(): Flow&lt;NetworkResult&lt;List&lt;Loket&gt;&gt;&gt; = flow {&#10;        emit(NetworkResult.Loading())&#10;        try {&#10;            val response = historyApi.getRecentHistory()&#10;            if (response.isSuccessful) {&#10;                val loketList = response.body()?.map { dto -&gt;&#10;                    Loket(&#10;                        loketNumber = dto.loketNumber,&#10;                        phoneNumber = dto.phoneNumber,&#10;                        loketName = dto.loketName,&#10;                        address = dto.address,&#10;                        status = if (dto.status == &quot;BLOCKED&quot;) LoketStatus.BLOCKED else LoketStatus.ACTIVE,&#10;                        lastAccessed = dto.lastAccessed,&#10;                        hasFlaggedTransactions = dto.hasFlaggedTransactions&#10;                    )&#10;                } ?: emptyList()&#10;                emit(NetworkResult.Success(loketList))&#10;            } else {&#10;                emit(NetworkResult.Error(&#10;                    code = response.code(),&#10;                    message = &quot;Gagal mengambil riwayat terakhir&quot;&#10;                ))&#10;            }&#10;        } catch (e: Exception) {&#10;            emit(NetworkResult.Error(message = &quot;Terjadi kesalahan saat mengambil riwayat&quot;))&#10;        }&#10;    }&#10;&#10;    override fun getFullHistory(): Flow&lt;NetworkResult&lt;List&lt;Loket&gt;&gt;&gt; = flow {&#10;        emit(NetworkResult.Loading())&#10;        try {&#10;            val response = historyApi.getFullHistory()&#10;            if (response.isSuccessful) {&#10;                val loketList = response.body()?.map { dto -&gt;&#10;                    Loket(&#10;                        loketNumber = dto.loketNumber,&#10;                        phoneNumber = dto.phoneNumber,&#10;                        loketName = dto.loketName,&#10;                        address = dto.address,&#10;                        status = if (dto.status == &quot;BLOCKED&quot;) LoketStatus.BLOCKED else LoketStatus.ACTIVE,&#10;                        lastAccessed = dto.lastAccessed,&#10;                        hasFlaggedTransactions = dto.hasFlaggedTransactions&#10;                    )&#10;                } ?: emptyList()&#10;                emit(NetworkResult.Success(loketList))&#10;            } else {&#10;                emit(NetworkResult.Error(&#10;                    code = response.code(),&#10;                    message = &quot;Gagal mengambil riwayat lengkap&quot;&#10;                ))&#10;            }&#10;        } catch (e: Exception) {&#10;            emit(NetworkResult.Error(message = &quot;Terjadi kesalahan saat mengambil riwayat&quot;))&#10;        }&#10;    }&#10;&#10;    override suspend fun flagTransaction(mutationId: String): NetworkResult&lt;Unit&gt; {&#10;        return try {&#10;            val response = api.flagTransaction(mutationId)&#10;            if (response.isSuccessful) {&#10;                NetworkResult.Success(Unit)&#10;            } else {&#10;                NetworkResult.Error(&#10;                    code = response.code(),&#10;                    message = &quot;Gagal menandai transaksi sebagai mencurigakan&quot;&#10;                )&#10;            }&#10;        } catch (e: Exception) {&#10;            NetworkResult.Error(message = &quot;Terjadi kesalahan saat menandai transaksi&quot;)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/proyek/maganggsp/data/repository/NetworkUtils.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/proyek/maganggsp/data/repository/NetworkUtils.kt" />
              <option name="originalContent" value="package com.proyek.maganggsp.data.repository&#10;&#10;import com.proyek.maganggsp.util.NetworkException&#10;import com.proyek.maganggsp.util.NetworkResult&#10;import retrofit2.HttpException&#10;import java.net.ConnectException&#10;import java.net.SocketTimeoutException&#10;import java.net.UnknownHostException&#10;&#10;/**&#10; * Extension function untuk mengkonversi throwable ke NetworkException&#10; */&#10;private fun Throwable.toNetworkException(): NetworkException {&#10;    return when (this) {&#10;        is ConnectException -&gt; NetworkException.Connection&#10;        is SocketTimeoutException -&gt; NetworkException.Timeout&#10;        is UnknownHostException -&gt; NetworkException.UnknownHost&#10;        is HttpException -&gt; {&#10;            when (code()) {&#10;                in 500..599 -&gt; NetworkException.Server(message())&#10;                in 400..499 -&gt; NetworkException.ClientError(message())&#10;                else -&gt; NetworkException.Unknown(message())&#10;            }&#10;        }&#10;        else -&gt; NetworkException.Unknown(message ?: &quot;Unknown error occurred&quot;)&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.proyek.maganggsp.data.repository&#10;&#10;import com.proyek.maganggsp.util.NetworkException&#10;import retrofit2.HttpException&#10;import java.net.ConnectException&#10;import java.net.SocketTimeoutException&#10;import java.net.UnknownHostException&#10;&#10;/**&#10; * Extension function untuk mengkonversi throwable ke NetworkException&#10; */&#10;fun Throwable.toNetworkException(): NetworkException {&#10;    return when (this) {&#10;        is ConnectException -&gt; NetworkException.Connection&#10;        is SocketTimeoutException -&gt; NetworkException.Timeout&#10;        is UnknownHostException -&gt; NetworkException.UnknownHost&#10;        is HttpException -&gt; {&#10;            when (code()) {&#10;                in 500..599 -&gt; NetworkException.Server(message())&#10;                in 400..499 -&gt; NetworkException.ClientError(message())&#10;                else -&gt; NetworkException.Unknown(message())&#10;            }&#10;        }&#10;        else -&gt; NetworkException.Unknown(message ?: &quot;Unknown error occurred&quot;)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/proyek/maganggsp/di/NetworkModule.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/proyek/maganggsp/di/NetworkModule.kt" />
              <option name="originalContent" value="package com.proyek.maganggsp.di&#10;&#10;import com.proyek.maganggsp.data.remote.api.AuthApi&#10;import com.proyek.maganggsp.data.remote.api.HistoryApi&#10;import com.proyek.maganggsp.data.remote.api.LoketApi&#10;import com.proyek.maganggsp.data.remote.interceptor.AuthInterceptor&#10;import dagger.Module&#10;import dagger.Provides&#10;import dagger.hilt.InstallIn&#10;import dagger.hilt.components.SingletonComponent&#10;import okhttp3.OkHttpClient&#10;import okhttp3.logging.HttpLoggingInterceptor&#10;import retrofit2.Retrofit&#10;import retrofit2.converter.gson.GsonConverterFactory&#10;import java.util.concurrent.TimeUnit&#10;import javax.inject.Singleton&#10;&#10;@Module&#10;@InstallIn(SingletonComponent::class)&#10;object NetworkModule {&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideOkHttpClient(authInterceptor: AuthInterceptor): OkHttpClient {&#10;        return OkHttpClient.Builder()&#10;            .addInterceptor(HttpLoggingInterceptor().apply {&#10;                level = HttpLoggingInterceptor.Level.BODY&#10;            })&#10;            .addInterceptor(authInterceptor)&#10;            .connectTimeout(30, TimeUnit.SECONDS)&#10;            .readTimeout(30, TimeUnit.SECONDS)&#10;            .writeTimeout(30, TimeUnit.SECONDS)&#10;            .build()&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideRetrofit(okHttpClient: OkHttpClient): Retrofit {&#10;        return Retrofit.Builder()&#10;            .baseUrl(&quot;https://api.gespay.co.id/&quot;) // Base URL akan diganti nanti&#10;            .client(okHttpClient)&#10;            .addConverterFactory(GsonConverterFactory.create())&#10;            .build()&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideAuthApi(retrofit: Retrofit): AuthApi {&#10;        return retrofit.create(AuthApi::class.java)&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideLoketApi(retrofit: Retrofit): LoketApi {&#10;        return retrofit.create(LoketApi::class.java)&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideHistoryApi(retrofit: Retrofit): HistoryApi {&#10;        return retrofit.create(HistoryApi::class.java)&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.proyek.maganggsp.di&#10;&#10;import com.proyek.maganggsp.BuildConfig&#10;import com.proyek.maganggsp.data.remote.api.AuthApi&#10;import com.proyek.maganggsp.data.remote.api.HistoryApi&#10;import com.proyek.maganggsp.data.remote.api.LoketApi&#10;import com.proyek.maganggsp.data.remote.interceptor.AuthInterceptor&#10;import dagger.Module&#10;import dagger.Provides&#10;import dagger.hilt.InstallIn&#10;import dagger.hilt.components.SingletonComponent&#10;import okhttp3.OkHttpClient&#10;import okhttp3.logging.HttpLoggingInterceptor&#10;import retrofit2.Retrofit&#10;import retrofit2.converter.gson.GsonConverterFactory&#10;import java.util.concurrent.TimeUnit&#10;import javax.inject.Singleton&#10;&#10;@Module&#10;@InstallIn(SingletonComponent::class)&#10;object NetworkModule {&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideOkHttpClient(authInterceptor: AuthInterceptor): OkHttpClient {&#10;        return OkHttpClient.Builder()&#10;            .addInterceptor(HttpLoggingInterceptor().apply {&#10;                level = HttpLoggingInterceptor.Level.BODY&#10;            })&#10;            .addInterceptor(authInterceptor)&#10;            .connectTimeout(30, TimeUnit.SECONDS)&#10;            .readTimeout(30, TimeUnit.SECONDS)&#10;            .writeTimeout(30, TimeUnit.SECONDS)&#10;            .build()&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideRetrofit(okHttpClient: OkHttpClient): Retrofit {&#10;        return Retrofit.Builder()&#10;            .baseUrl(BuildConfig.BASE_URL)&#10;            .client(okHttpClient)&#10;            .addConverterFactory(GsonConverterFactory.create())&#10;            .build()&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideAuthApi(retrofit: Retrofit): AuthApi {&#10;        return retrofit.create(AuthApi::class.java)&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideLoketApi(retrofit: Retrofit): LoketApi {&#10;        return retrofit.create(LoketApi::class.java)&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideHistoryApi(retrofit: Retrofit): HistoryApi {&#10;        return retrofit.create(HistoryApi::class.java)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/proyek/maganggsp/di/RepositoryModule.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/proyek/maganggsp/di/RepositoryModule.kt" />
              <option name="updatedContent" value="package com.proyek.maganggsp.di&#10;&#10;import com.proyek.maganggsp.data.repository.AuthRepositoryImpl&#10;import com.proyek.maganggsp.data.repository.LoketRepositoryImpl&#10;import com.proyek.maganggsp.domain.repository.AuthRepository&#10;import com.proyek.maganggsp.domain.repository.LoketRepository&#10;import dagger.Binds&#10;import dagger.Module&#10;import dagger.hilt.InstallIn&#10;import dagger.hilt.components.SingletonComponent&#10;import javax.inject.Singleton&#10;&#10;@Module&#10;@InstallIn(SingletonComponent::class)&#10;abstract class RepositoryModule {&#10;    &#10;    @Binds&#10;    @Singleton&#10;    abstract fun bindAuthRepository(&#10;        authRepositoryImpl: AuthRepositoryImpl&#10;    ): AuthRepository&#10;&#10;    @Binds&#10;    @Singleton&#10;    abstract fun bindLoketRepository(&#10;        loketRepositoryImpl: LoketRepositoryImpl&#10;    ): LoketRepository&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/proyek/maganggsp/domain/model/Admin.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/proyek/maganggsp/domain/model/Admin.kt" />
              <option name="updatedContent" value="package com.proyek.maganggsp.domain.model&#10;&#10;/**&#10; * Model domain untuk data Admin&#10; */&#10;data class Admin(&#10;    val id: String,&#10;    val email: String,&#10;    val name: String,&#10;    val role: String&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/proyek/maganggsp/domain/model/Loket.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/proyek/maganggsp/domain/model/Loket.kt" />
              <option name="originalContent" value="package com.proyek.maganggsp.domain.model&#10;&#10;/**&#10; * Model domain untuk data Loket (Mitra)&#10; */&#10;data class Loket(&#10;    val id: String,&#10;    val phoneNumber: String,&#10;    val ownerName: String,&#10;    val address: String,&#10;    val status: LoketStatus,&#10;    val lastAccessed: String,&#10;    val hasFlaggedTransactions: Boolean&#10;)&#10;&#10;enum class LoketStatus {&#10;    ACTIVE,&#10;    BLOCKED&#10;}&#10;" />
              <option name="updatedContent" value="package com.proyek.maganggsp.domain.model&#10;&#10;/**&#10; * Model domain untuk data Loket (Mitra)&#10; */&#10;data class Loket(&#10;    val loketNumber: String,&#10;    val phoneNumber: String,&#10;    val loketName: String,&#10;    val address: String,&#10;    val status: LoketStatus,&#10;    val lastAccessed: String,&#10;    val hasFlaggedTransactions: Boolean&#10;)&#10;&#10;enum class LoketStatus {&#10;    ACTIVE,&#10;    BLOCKED&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/proyek/maganggsp/domain/model/Mutasi.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/proyek/maganggsp/domain/model/Mutasi.kt" />
              <option name="originalContent" value="package com.proyek.maganggsp.domain.model&#10;&#10;import java.math.BigDecimal&#10;import java.util.Date&#10;&#10;/**&#10; * Model domain untuk data Mutasi (Transaksi)&#10; */&#10;data class Mutasi(&#10;    val refNumber: String,&#10;    val loketId: String,&#10;    val amount: BigDecimal,&#10;    val timestamp: Date,&#10;    val isFlagged: Boolean&#10;)&#10;" />
              <option name="updatedContent" value="package com.proyek.maganggsp.domain.model&#10;&#10;import java.math.BigDecimal&#10;import java.util.Date&#10;&#10;/**&#10; * Model domain untuk data Mutasi (Transaksi)&#10; */&#10;data class Mutasi(&#10;    val refNumber: String,&#10;    val amount: BigDecimal,&#10;    val timestamp: Date,&#10;    val isFlagged: Boolean&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/proyek/maganggsp/domain/repository/AuthRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/proyek/maganggsp/domain/repository/AuthRepository.kt" />
              <option name="originalContent" value="package com.proyek.maganggsp.domain.repository&#10;&#10;import com.proyek.maganggsp.domain.model.Admin&#10;import com.proyek.maganggsp.util.Resource&#10;&#10;/**&#10; * Interface repository untuk autentikasi&#10; */&#10;interface AuthRepository {&#10;    suspend fun login(email: String, password: String): Resource&lt;Admin&gt;&#10;}&#10;" />
              <option name="updatedContent" value="package com.proyek.maganggsp.domain.repository&#10;&#10;import com.proyek.maganggsp.domain.model.Admin&#10;import com.proyek.maganggsp.util.NetworkResult&#10;&#10;/**&#10; * Interface repository untuk autentikasi&#10; */&#10;interface AuthRepository {&#10;    suspend fun login(email: String, password: String): NetworkResult&lt;Admin&gt;&#10;    suspend fun logout(): NetworkResult&lt;Unit&gt;&#10;    suspend fun getStoredToken(): String?&#10;    suspend fun clearStoredToken()&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/proyek/maganggsp/domain/repository/LoketRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/proyek/maganggsp/domain/repository/LoketRepository.kt" />
              <option name="originalContent" value="package com.proyek.maganggsp.domain.repository&#10;&#10;import com.proyek.maganggsp.domain.model.Loket&#10;import com.proyek.maganggsp.domain.model.Mutasi&#10;import com.proyek.maganggsp.util.NetworkResult&#10;import kotlinx.coroutines.flow.Flow&#10;&#10;/**&#10; * Interface repository untuk operasi terkait Loket&#10; */&#10;interface LoketRepository {&#10;    suspend fun getLoketByPhone(phoneNumber: String): NetworkResult&lt;Loket&gt;&#10;&#10;    suspend fun getMutations(loketNumber: String): NetworkResult&lt;List&lt;Mutasi&gt;&gt;&#10;&#10;    suspend fun blockLoket(loketNumber: String): NetworkResult&lt;Unit&gt;&#10;&#10;    suspend fun unblockLoket(loketNumber: String): NetworkResult&lt;Unit&gt;&#10;&#10;    suspend fun getFlaggedLokets(): NetworkResult&lt;List&lt;Loket&gt;&gt;&#10;&#10;    suspend fun getBlockedLokets(): NetworkResult&lt;List&lt;Loket&gt;&gt;&#10;&#10;    fun getRecentHistory(): Flow&lt;NetworkResult&lt;List&lt;Loket&gt;&gt;&gt;&#10;&#10;    fun getFullHistory(): Flow&lt;NetworkResult&lt;List&lt;Loket&gt;&gt;&gt;&#10;}&#10;" />
              <option name="updatedContent" value="package com.proyek.maganggsp.domain.repository&#10;&#10;import com.proyek.maganggsp.domain.model.Loket&#10;import com.proyek.maganggsp.domain.model.Mutasi&#10;import com.proyek.maganggsp.util.NetworkResult&#10;import kotlinx.coroutines.flow.Flow&#10;&#10;/**&#10; * Interface repository untuk operasi terkait Loket&#10; */&#10;interface LoketRepository {&#10;    suspend fun getLoketByPhone(phoneNumber: String): NetworkResult&lt;Loket&gt;&#10;&#10;    suspend fun getMutations(loketNumber: String): NetworkResult&lt;List&lt;Mutasi&gt;&gt;&#10;&#10;    suspend fun blockLoket(loketNumber: String): NetworkResult&lt;Unit&gt;&#10;&#10;    suspend fun unblockLoket(loketNumber: String): NetworkResult&lt;Unit&gt;&#10;&#10;    suspend fun getFlaggedLokets(): NetworkResult&lt;List&lt;Loket&gt;&gt;&#10;&#10;    suspend fun getBlockedLokets(): NetworkResult&lt;List&lt;Loket&gt;&gt;&#10;&#10;    fun getRecentHistory(): Flow&lt;NetworkResult&lt;List&lt;Loket&gt;&gt;&gt;&#10;&#10;    fun getFullHistory(): Flow&lt;NetworkResult&lt;List&lt;Loket&gt;&gt;&gt;&#10;&#10;    suspend fun flagTransaction(mutationId: String): NetworkResult&lt;Unit&gt;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/proyek/maganggsp/domain/usecase/auth/LoginUseCase.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/proyek/maganggsp/domain/usecase/auth/LoginUseCase.kt" />
              <option name="updatedContent" value="package com.proyek.maganggsp.domain.usecase.auth&#10;&#10;import com.proyek.maganggsp.domain.model.Admin&#10;import com.proyek.maganggsp.domain.repository.AuthRepository&#10;import com.proyek.maganggsp.util.NetworkResult&#10;import javax.inject.Inject&#10;&#10;class LoginUseCase @Inject constructor(&#10;    private val repository: AuthRepository&#10;) {&#10;    suspend operator fun invoke(email: String, password: String): NetworkResult&lt;Admin&gt; {&#10;        if (email.isBlank()) {&#10;            return NetworkResult.Error(message = &quot;Email tidak boleh kosong&quot;)&#10;        }&#10;        if (password.isBlank()) {&#10;            return NetworkResult.Error(message = &quot;Password tidak boleh kosong&quot;)&#10;        }&#10;        if (!email.contains(&quot;@&quot;)) {&#10;            return NetworkResult.Error(message = &quot;Format email tidak valid&quot;)&#10;        }&#10;        &#10;        return repository.login(email, password)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/proyek/maganggsp/domain/usecase/auth/LogoutUseCase.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/proyek/maganggsp/domain/usecase/auth/LogoutUseCase.kt" />
              <option name="updatedContent" value="package com.proyek.maganggsp.domain.usecase.auth&#10;&#10;import com.proyek.maganggsp.domain.repository.AuthRepository&#10;import com.proyek.maganggsp.util.NetworkResult&#10;import javax.inject.Inject&#10;&#10;class LogoutUseCase @Inject constructor(&#10;    private val repository: AuthRepository&#10;) {&#10;    suspend operator fun invoke(): NetworkResult&lt;Unit&gt; {&#10;        val result = repository.logout()&#10;        if (result is NetworkResult.Success) {&#10;            repository.clearStoredToken()&#10;        }&#10;        return result&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/proyek/maganggsp/domain/usecase/history/HistoryUseCase.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/proyek/maganggsp/domain/usecase/history/HistoryUseCase.kt" />
              <option name="updatedContent" value="package com.proyek.maganggsp.domain.usecase.history&#10;&#10;import com.proyek.maganggsp.domain.model.Loket&#10;import com.proyek.maganggsp.domain.repository.LoketRepository&#10;import com.proyek.maganggsp.util.NetworkResult&#10;import kotlinx.coroutines.flow.Flow&#10;import javax.inject.Inject&#10;&#10;class GetRecentHistoryUseCase @Inject constructor(&#10;    private val repository: LoketRepository&#10;) {&#10;    operator fun invoke(): Flow&lt;NetworkResult&lt;List&lt;Loket&gt;&gt;&gt; {&#10;        return repository.getRecentHistory()&#10;    }&#10;}&#10;&#10;class GetFullHistoryUseCase @Inject constructor(&#10;    private val repository: LoketRepository&#10;) {&#10;    operator fun invoke(): Flow&lt;NetworkResult&lt;List&lt;Loket&gt;&gt;&gt; {&#10;        return repository.getFullHistory()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/proyek/maganggsp/domain/usecase/loket/GetLoketByPhoneUseCase.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/proyek/maganggsp/domain/usecase/loket/GetLoketByPhoneUseCase.kt" />
              <option name="originalContent" value="package com.proyek.maganggsp.domain.usecase.loket&#10;&#10;import com.proyek.maganggsp.domain.model.Loket&#10;import com.proyek.maganggsp.domain.repository.LoketRepository&#10;import com.proyek.maganggsp.util.NetworkResult&#10;import javax.inject.Inject&#10;&#10;class GetLoketByPhoneUseCase @Inject constructor(&#10;    private val repository: LoketRepository&#10;) {&#10;    suspend operator fun invoke(phoneNumber: String): NetworkResult&lt;Loket&gt; {&#10;        if (phoneNumber.isBlank()) {&#10;            return NetworkResult.Error(message = &quot;Nomor telepon tidak boleh kosong&quot;)&#10;        }&#10;&#10;        // Format nomor telepon (hapus spasi dan karakter khusus)&#10;        val formattedPhone = phoneNumber.replace(Regex(&quot;[^0-9]&quot;), &quot;&quot;)&#10;&#10;        if (formattedPhone.length &lt; 10 || formattedPhone.length &gt; 13) {&#10;            return NetworkResult.Error(message = &quot;Nomor telepon tidak valid&quot;)&#10;        }&#10;&#10;        return repository.getLoketByPhone(formattedPhone)&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.proyek.maganggsp.domain.usecase.loket&#10;&#10;import com.proyek.maganggsp.domain.model.Loket&#10;import com.proyek.maganggsp.domain.repository.LoketRepository&#10;import com.proyek.maganggsp.util.NetworkResult&#10;import javax.inject.Inject&#10;&#10;class GetLoketByPhoneUseCase @Inject constructor(&#10;    private val repository: LoketRepository&#10;) {&#10;    suspend operator fun invoke(phoneNumber: String): NetworkResult&lt;Loket&gt; {&#10;        if (phoneNumber.isBlank()) {&#10;            return NetworkResult.Error(message = &quot;Nomor telepon tidak boleh kosong&quot;)&#10;        }&#10;        &#10;        // Format nomor telepon (hapus spasi dan karakter khusus)&#10;        val formattedPhone = phoneNumber.replace(Regex(&quot;[^0-9]&quot;), &quot;&quot;)&#10;        &#10;        // Validasi format nomor Indonesia&#10;        if (!formattedPhone.matches(Regex(&quot;^(\\+62|62|0)[8][1-9][0-9]{6,9}\$&quot;))) {&#10;            return NetworkResult.Error(&#10;                message = &quot;Format nomor telepon tidak valid. Gunakan format Indonesia: 08xx-xxxx-xxxx&quot;&#10;            )&#10;        }&#10;        &#10;        // Konversi ke format 62xxx&#10;        val normalizedPhone = when {&#10;            formattedPhone.startsWith(&quot;0&quot;) -&gt; &quot;62${formattedPhone.substring(1)}&quot;&#10;            formattedPhone.startsWith(&quot;62&quot;) -&gt; formattedPhone&#10;            formattedPhone.startsWith(&quot;+62&quot;) -&gt; formattedPhone.substring(1)&#10;            else -&gt; &quot;62$formattedPhone&quot;&#10;        }&#10;        &#10;        return repository.getLoketByPhone(normalizedPhone)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/proyek/maganggsp/domain/usecase/loket/MonitoringUseCase.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/proyek/maganggsp/domain/usecase/loket/MonitoringUseCase.kt" />
              <option name="updatedContent" value="package com.proyek.maganggsp.domain.usecase.loket&#10;&#10;import com.proyek.maganggsp.domain.model.Loket&#10;import com.proyek.maganggsp.domain.repository.LoketRepository&#10;import com.proyek.maganggsp.util.NetworkResult&#10;import javax.inject.Inject&#10;&#10;class GetFlaggedLoketsUseCase @Inject constructor(&#10;    private val repository: LoketRepository&#10;) {&#10;    suspend operator fun invoke(): NetworkResult&lt;List&lt;Loket&gt;&gt; {&#10;        return repository.getFlaggedLokets()&#10;    }&#10;}&#10;&#10;class GetBlockedLoketsUseCase @Inject constructor(&#10;    private val repository: LoketRepository&#10;) {&#10;    suspend operator fun invoke(): NetworkResult&lt;List&lt;Loket&gt;&gt; {&#10;        return repository.getBlockedLokets()&#10;    }&#10;}&#10;&#10;class BlockLoketUseCase @Inject constructor(&#10;    private val repository: LoketRepository&#10;) {&#10;    suspend operator fun invoke(loketNumber: String): NetworkResult&lt;Unit&gt; {&#10;        if (loketNumber.isBlank()) {&#10;            return NetworkResult.Error(message = &quot;Nomor loket tidak boleh kosong&quot;)&#10;        }&#10;        return repository.blockLoket(loketNumber)&#10;    }&#10;}&#10;&#10;class UnblockLoketUseCase @Inject constructor(&#10;    private val repository: LoketRepository&#10;) {&#10;    suspend operator fun invoke(loketNumber: String): NetworkResult&lt;Unit&gt; {&#10;        if (loketNumber.isBlank()) {&#10;            return NetworkResult.Error(message = &quot;Nomor loket tidak boleh kosong&quot;)&#10;        }&#10;        return repository.unblockLoket(loketNumber)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/proyek/maganggsp/domain/usecase/mutasi/FlagTransactionUseCase.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/proyek/maganggsp/domain/usecase/mutasi/FlagTransactionUseCase.kt" />
              <option name="updatedContent" value="package com.proyek.maganggsp.domain.usecase.mutasi&#10;&#10;import com.proyek.maganggsp.domain.repository.LoketRepository&#10;import com.proyek.maganggsp.util.NetworkResult&#10;import javax.inject.Inject&#10;&#10;class FlagTransactionUseCase @Inject constructor(&#10;    private val repository: LoketRepository&#10;) {&#10;    suspend operator fun invoke(mutationId: String): NetworkResult&lt;Unit&gt; {&#10;        if (mutationId.isBlank()) {&#10;            return NetworkResult.Error(message = &quot;ID mutasi tidak boleh kosong&quot;)&#10;        }&#10;        return repository.flagTransaction(mutationId)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/proyek/maganggsp/domain/usecase/mutasi/GetMutasiLoketUseCase.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/proyek/maganggsp/domain/usecase/mutasi/GetMutasiLoketUseCase.kt" />
              <option name="updatedContent" value="package com.proyek.maganggsp.domain.usecase.mutasi&#10;&#10;import com.proyek.maganggsp.domain.model.Mutasi&#10;import com.proyek.maganggsp.domain.repository.LoketRepository&#10;import com.proyek.maganggsp.util.NetworkResult&#10;import javax.inject.Inject&#10;&#10;class GetMutasiLoketUseCase @Inject constructor(&#10;    private val repository: LoketRepository&#10;) {&#10;    suspend operator fun invoke(loketNumber: String): NetworkResult&lt;List&lt;Mutasi&gt;&gt; {&#10;        if (loketNumber.isBlank()) {&#10;            return NetworkResult.Error(message = &quot;Nomor loket tidak boleh kosong&quot;)&#10;        }&#10;        return repository.getMutations(loketNumber)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/proyek/maganggsp/presentation/auth/LoginFragment.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/proyek/maganggsp/presentation/auth/LoginFragment.kt" />
              <option name="updatedContent" value="package com.proyek.maganggsp.presentation.auth&#10;&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import androidx.fragment.app.Fragment&#10;import androidx.fragment.app.viewModels&#10;import com.proyek.maganggsp.R&#10;import dagger.hilt.android.AndroidEntryPoint&#10;&#10;@AndroidEntryPoint&#10;class LoginFragment : Fragment() {&#10;    private val viewModel: LoginViewModel by viewModels()&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater,&#10;        container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View? {&#10;        return inflater.inflate(R.layout.fragment_login, container, false)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/proyek/maganggsp/util/NetworkException.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/proyek/maganggsp/util/NetworkException.kt" />
              <option name="updatedContent" value="package com.proyek.maganggsp.util&#10;&#10;sealed class NetworkException : Exception() {&#10;    object Connection : NetworkException()&#10;    object Timeout : NetworkException()&#10;    object UnknownHost : NetworkException()&#10;    data class Server(override val message: String) : NetworkException()&#10;    data class ClientError(override val message: String) : NetworkException()&#10;    data class Unknown(override val message: String) : NetworkException()&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/proyek/maganggsp/util/NetworkResult.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/proyek/maganggsp/util/NetworkResult.kt" />
              <option name="updatedContent" value="package com.proyek.maganggsp.util&#10;&#10;sealed class NetworkResult&lt;T&gt; {&#10;    data class Success&lt;T&gt;(val data: T): NetworkResult&lt;T&gt;()&#10;    data class Error&lt;T&gt;(&#10;        val code: Int? = null,&#10;        val message: String? = null,&#10;        val networkMessage: String? = null&#10;    ): NetworkResult&lt;T&gt;()&#10;    class Loading&lt;T&gt;: NetworkResult&lt;T&gt;()&#10;    class Idle&lt;T&gt;: NetworkResult&lt;T&gt;()&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/proyek/maganggsp/util/Resource.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/proyek/maganggsp/util/Resource.kt" />
              <option name="updatedContent" value="package com.proyek.maganggsp.util&#10;&#10;/**&#10; * Class wrapper untuk menangani status dan hasil dari operasi repository&#10; */&#10;sealed class Resource&lt;T&gt;(&#10;    val data: T? = null,&#10;    val message: String? = null&#10;) {&#10;    class Success&lt;T&gt;(data: T) : Resource&lt;T&gt;(data)&#10;    class Error&lt;T&gt;(message: String, data: T? = null) : Resource&lt;T&gt;(data, message)&#10;    class Loading&lt;T&gt;(data: T? = null) : Resource&lt;T&gt;(data)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/proyek/maganggsp/view/base/BaseViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/proyek/maganggsp/view/base/BaseViewModel.kt" />
              <option name="updatedContent" value="package com.proyek.maganggsp.view.base&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import kotlinx.coroutines.flow.MutableSharedFlow&#10;import kotlinx.coroutines.flow.SharedFlow&#10;import kotlinx.coroutines.launch&#10;&#10;abstract class BaseViewModel : ViewModel() {&#10;    private val _error = MutableSharedFlow&lt;String&gt;()&#10;    val error: SharedFlow&lt;String&gt; = _error&#10;&#10;    private val _loading = MutableSharedFlow&lt;Boolean&gt;()&#10;    val loading: SharedFlow&lt;Boolean&gt; = _loading&#10;&#10;    protected fun showError(message: String) {&#10;        viewModelScope.launch {&#10;            _error.emit(message)&#10;        }&#10;    }&#10;&#10;    protected fun showLoading(isLoading: Boolean) {&#10;        viewModelScope.launch {&#10;            _loading.emit(isLoading)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/navigation/nav_graph.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/navigation/nav_graph.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;navigation xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:id=&quot;@+id/nav_graph&quot;&#10;    app:startDestination=&quot;@id/loginFragment&quot;&gt;&#10;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/loginFragment&quot;&#10;        android:name=&quot;com.proyek.maganggsp.presentation.auth.LoginFragment&quot;&#10;        android:label=&quot;Login&quot;&gt;&#10;        &lt;action&#10;            android:id=&quot;@+id/action_loginFragment_to_homeFragment&quot;&#10;            app:destination=&quot;@id/homeFragment&quot;&#10;            app:popUpTo=&quot;@id/loginFragment&quot;&#10;            app:popUpToInclusive=&quot;true&quot; /&gt;&#10;    &lt;/fragment&gt;&#10;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/homeFragment&quot;&#10;        android:name=&quot;com.proyek.maganggsp.presentation.home.HomeFragment&quot;&#10;        android:label=&quot;Beranda&quot;&gt;&#10;        &lt;action&#10;            android:id=&quot;@+id/action_homeFragment_to_detailLoketActivity&quot;&#10;            app:destination=&quot;@id/detailLoketActivity&quot; /&gt;&#10;    &lt;/fragment&gt;&#10;&#10;    &lt;activity&#10;        android:id=&quot;@+id/detailLoketActivity&quot;&#10;        android:name=&quot;com.proyek.maganggsp.presentation.loket.DetailLoketActivity&quot;&#10;        android:label=&quot;Detail Loket&quot;&gt;&#10;        &lt;argument&#10;            android:name=&quot;loketNumber&quot;&#10;            app:argType=&quot;string&quot; /&gt;&#10;    &lt;/activity&gt;&#10;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/monitorFragment&quot;&#10;        android:name=&quot;com.proyek.maganggsp.presentation.monitor.MonitorFragment&quot;&#10;        android:label=&quot;Monitor&quot; /&gt;&#10;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/historyFragment&quot;&#10;        android:name=&quot;com.proyek.maganggsp.presentation.history.HistoryFragment&quot;&#10;        android:label=&quot;Riwayat&quot; /&gt;&#10;&#10;&lt;/navigation&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/build.gradle.kts" />
              <option name="originalContent" value="buildscript {&#10;    repositories {&#10;        google()&#10;        mavenCentral()&#10;    }&#10;    dependencies {&#10;        classpath(&quot;com.google.dagger:hilt-android-gradle-plugin:2.48&quot;)&#10;    }&#10;}&#10;&#10;plugins {&#10;    id(&quot;com.android.application&quot;) version &quot;8.1.0&quot; apply false&#10;    id(&quot;org.jetbrains.kotlin.android&quot;) version &quot;1.8.22&quot; apply false&#10;    id(&quot;com.google.dagger.hilt.android&quot;) version &quot;2.48&quot; apply false&#10;}&#10;&#10;tasks.register(&quot;clean&quot;, Delete::class) {&#10;    delete(rootProject.buildDir)&#10;}&#10;" />
              <option name="updatedContent" value="buildscript {&#10;    repositories {&#10;        google()&#10;        mavenCentral()&#10;    }&#10;    dependencies {&#10;        classpath(&quot;com.google.dagger:hilt-android-gradle-plugin:2.48&quot;)&#10;        classpath(&quot;androidx.navigation:navigation-safe-args-gradle-plugin:2.7.5&quot;)&#10;    }&#10;}&#10;&#10;plugins {&#10;    id(&quot;com.android.application&quot;) version &quot;8.1.0&quot; apply false&#10;    id(&quot;org.jetbrains.kotlin.android&quot;) version &quot;1.8.22&quot; apply false&#10;    id(&quot;com.google.dagger.hilt.android&quot;) version &quot;2.48&quot; apply false&#10;}&#10;&#10;tasks.register(&quot;clean&quot;, Delete::class) {&#10;    delete(rootProject.buildDir)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>